
account:{
	vostro,存放在国外同意帐户，往帐，我方帐户，银行往来帐户;来帐;
	nostro,同业存款，贵行帐，来帐;（国外汇兑）往（来）帐；我方帐户;
	
	nostro,往账,我行在其他行开户.通常国外货币开立;
	vostro,来账,其他行在我行开户.通常本国货币,也可外国货币;
}
exchange:{
	https://max.book118.com/html/2018/1107/7102003026001156.shtm
	"外汇"-'国际汇兑'-"foreign exchange":{
		"汇兑":{
			"汇款人"委托"银行"将其"款项"支付给"收款人"的'结算方式'。
			电汇/信汇 '汇款人自行选择'
			单位/个人 '各种款项的结算',均可'使用汇兑结算方式'。
			'这种方式便于汇款人向'异地'的收款人'主动'付款','适用范围十分广泛'。
			'简而言之',汇兑'即'"委托""银行"'作为'"付款人"'进行'"付款"
		}
		'词语属性':{
			'动态','把一国货币兑换成另一国货币','借以偿清国际间债权债务关系的行为和活动'。'等同于国际结算';
			'静态','指外币和以外币表示的''用于''国际结算的各种支付手段'.'例如','各种外国钞票及外币表示的证券或其他支付凭证';
		},
		'分类':{
			'自由兑换':{
				记账外汇:{'债权债务不逐笔结算','而是通过当事国的中央银行账户相互冲销','不能用来对第三国支付','不能兑换成其他国家的货币'},
				自由外汇:{'可以自由兑换成其他货币、或向第三者办理支付的货币与支付凭证'}
			},
			'来源用途':{贸易外汇:'来源于或用于国际间商品买卖的外汇',非贸易外汇:'除贸易外汇以外,通过其他方面所收付的外汇。如科学技术、文化交流...'},
			'交割期限':{'即期外汇':"现汇",'在外汇买卖成交后两个营业日内办理交割的外汇','远期外汇':"期汇",'买卖外汇双方先按商定的汇价签订合同,预约到一定期限办理交割的外汇'}
		},
		"结汇":{
			'外汇收入所有者将其外汇收入,出售给外汇指定银行,外汇指定银行按照一定汇率付给等值的'"本币"'行为';
			'强制结汇','所有外汇收入'"必须"'卖给外汇指定银行,不允许保留外汇';-'主要'
			'意愿结汇','外汇收入可以卖给外汇指定银行,也可以'"开立外汇账户"'保留,结汇与否由外汇收入所有者自己决定';-'境内居民个人'
			'限额结汇','外汇收入在国家核定的数额内可不结汇,超过'"限额"'必须卖给外汇指定银行';-'部分企业经批准'
		},
		"售汇":{'外汇指定银行将外汇'"卖给"'外汇使用者,并根据交易行为发生之日的人民币汇率'"收取"'等值人民币行为';},
		"付汇":{'经批准经营外汇业务的金融机构,根据有关售汇以及付汇的管理规定,审核用汇单位和个人提供的规定的有效凭证和商业单据后,从其'"外汇账户"'中或将其购买的'"外汇"'向'"境外"'支付的行为';},
		"售汇":{'外汇指定银行将外汇'"卖给"'外汇使用者,并根据交易行为发生之日的人民币汇率'"收取"'等值人民币行为';},
		"套汇":{'利用同一时期'"两个"'或两个以上的外汇市场上现汇'"汇率"'的'"差异"'进行外汇买卖,通过低进高出即贱买贵卖从中套取利润的一种投机活动'},
	}
},
edsp:{
	pom:{
		cn.sunline.edsp.edsp-parent-'EDSP公共父项目':{
			1.2.22-RELEASE:{
				<properties>
					<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
					<dist.env>default</dist.env>
					<ltts.maven.version>2.4.3</ltts.maven.version>
					<jdk.compiler.version>1.7</jdk.compiler.version>
					<ltts.maven.doc.version>2.3.7</ltts.maven.doc.version>
					<freemarker.version>2.3.20</freemarker.version>
					<ojdbc6.version>11.2.0.4.0</ojdbc6.version>
					<mariadb-java-client.version>1.1.8</mariadb-java-client.version>
					<cglib-nodep.version>2.2.2</cglib-nodep.version>
					<commons-lang3.version>3.1</commons-lang3.version>
					<commons-beanutils-core.version> 1.8.3</commons-beanutils-core.version>
					<commons-io.version>2.0.1</commons-io.version>
					<commons-pool.version>1.5.4</commons-pool.version>
					<log4j-core.version>2.8.1</log4j-core.version>
					<log4j-api.version>2.8.1</log4j-api.version>
					<disruptor.version>3.3.6</disruptor.version>
					<ognl.version>2.7.3</ognl.version>
					<hsqldb.version>2.2.8</hsqldb.version>
					<junit.version>4.10</junit.version>
					<bonecp.version>0.7.1.RELEASE</bonecp.version>
					<commons-dbcp.version> 1.4</commons-dbcp.version>
					<nutzdoc.version>1.16</nutzdoc.version>
					<commons-net.version>3.2</commons-net.version>
					<mybatis.version>3.2.2</mybatis.version>
					<jxl.version>2.6.12</jxl.version>
					<log4j-jcl.version>2.2</log4j-jcl.version>
					<log4j-1.2-api.version> 2.2</log4j-1.2-api.version>
					<log4j-slf4j-impl.version>2.2</log4j-slf4j-impl.version>
					<fastjson.version>1.2.29</fastjson.version>
					<mvel2.version> 2.0.19</mvel2.version>
					<ganymed-ssh2.version>build210</ganymed-ssh2.version>
					<slf4j-api.version>1.7.1</slf4j-api.version>
					<mysql-connector-java.version>5.1.31</mysql-connector-java.version>
					<commons-collections.version>3.2.2</commons-collections.version>
					<guava.version>20.0</guava.version>
					<netty.version>4.1.6.Final</netty.version>
					<!-- test -->
					<skipTests>true</skipTests>
					<!-- plugin config -->
					<testReportDirectory>testReportDirectory</testReportDirectory>
					
					<!-- dist configure -->
					<edsp-maven-genshell-version>1.0</edsp-maven-genshell-version>
					<shell.vmOpts>-server -Xms1024m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m</shell.vmOpts>
					<url.assembly>http://proxy.yfb.sunline.cn/repos/offline/assembly.xml</url.assembly>
					
					<!-- proguard -->
					<proguard.skip>true</proguard.skip>
					<proguard.conf>${basedir}/proguard.conf</proguard.conf>
				</properties>

				<dependencyManagement>
					<dependencies>
						<dependency>
							<groupId>io.netty</groupId>
							<artifactId>netty-all</artifactId>
							<version>${netty.version}</version>
						</dependency>
						<dependency>
							<artifactId>guava</artifactId>
							<groupId>com.google.guava</groupId>
							<version>${guava.version}</version>
						</dependency>
						<dependency>
							<artifactId>commons-collections</artifactId>
							<groupId>commons-collections</groupId>
							<version>${commons-collections.version}</version>
						</dependency>
						<dependency>
							<groupId>org.freemarker</groupId>
							<artifactId>freemarker</artifactId>
							<version>${freemarker.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>com.oracle</groupId>
							<artifactId>ojdbc6</artifactId>
							<version>${ojdbc6.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>org.mariadb.jdbc</groupId>
							<artifactId>mariadb-java-client</artifactId>
							<version>${mariadb-java-client.version}</version>
						</dependency>
						<dependency>
							<groupId>cglib</groupId>
							<artifactId>cglib-nodep</artifactId>
							<version>${cglib-nodep.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.commons</groupId>
							<artifactId>commons-lang3</artifactId>
							<version>${commons-lang3.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>commons-beanutils</groupId>
							<artifactId>commons-beanutils-core</artifactId>
							<version>${commons-beanutils-core.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>commons-io</groupId>
							<artifactId>commons-io</artifactId>
							<version>${commons-io.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.logging.log4j</groupId>
							<artifactId>log4j-core</artifactId>
							<version>${log4j-core.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.logging.log4j</groupId>
							<artifactId>log4j-api</artifactId>
							<version>${log4j-api.version}</version>
						</dependency>
						<dependency>
							<groupId>com.lmax</groupId>
							<artifactId>disruptor</artifactId>
							<version>${disruptor.version}</version>
						</dependency>
						<dependency>
							<groupId>ognl</groupId>
							<artifactId>ognl</artifactId>
							<version>${ognl.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>org.hsqldb</groupId>
							<artifactId>hsqldb</artifactId>
							<version>${hsqldb.version}</version>
							<scope>compile</scope>
						</dependency>
						<dependency>
							<groupId>junit</groupId>
							<artifactId>junit</artifactId>
							<version>${junit.version}</version>
							<scope>test</scope>
						</dependency>
						<dependency>
							<groupId>com.jolbox</groupId>
							<artifactId>bonecp</artifactId>
							<version>${bonecp.version}</version>
						</dependency>
						<dependency>
							<groupId>commons-dbcp</groupId>
							<artifactId>commons-dbcp</artifactId>
							<version>${commons-dbcp.version}</version>
						</dependency>
						<dependency>
							<groupId>org.nutz</groupId>
							<artifactId>nutzdoc</artifactId>
							<version>${nutzdoc.version}</version>
						</dependency>
						<dependency>
							<groupId>commons-net</groupId>
							<artifactId>commons-net</artifactId>
							<version>${commons-net.version}</version>
						</dependency>
						<dependency>
							<groupId>org.mybatis</groupId>
							<artifactId>mybatis</artifactId>
							<version>${mybatis.version}</version>
						</dependency>
						<dependency>
							<groupId>net.sourceforge.jexcelapi</groupId>
							<artifactId>jxl</artifactId>
							<version>${jxl.version}</version>
							<exclusions>
								<exclusion>
									<artifactId>log4j</artifactId>
									<groupId>log4j</groupId>
								</exclusion>
							</exclusions>
						</dependency>
						<dependency>
							<groupId>org.apache.logging.log4j</groupId>
							<artifactId>log4j-jcl</artifactId>
							<version>${log4j-jcl.version}</version>
						</dependency>
						<dependency>
							<groupId>org.apache.logging.log4j</groupId>
							<artifactId>log4j-1.2-api</artifactId>
							<version>${log4j-1.2-api.version}</version>
						</dependency>
						<dependency>
							<groupId>org.apache.logging.log4j</groupId>
							<artifactId>log4j-slf4j-impl</artifactId>
							<version>${log4j-slf4j-impl.version}</version>
						</dependency>
						<dependency>
							<groupId>com.alibaba</groupId>
							<artifactId>fastjson</artifactId>
							<version>${fastjson.version}</version>
						</dependency>
						<dependency>
							<groupId>org.mvel</groupId>
							<artifactId>mvel2</artifactId>
							<version>${mvel2.version}</version>
						</dependency>
						<dependency>
							<groupId>ch.ethz.ganymed</groupId>
							<artifactId>ganymed-ssh2</artifactId>
							<version>${ganymed-ssh2.version}</version>
						</dependency>
						<dependency>
							<groupId>org.slf4j</groupId>
							<artifactId>slf4j-api</artifactId>
							<version>${slf4j-api.version}</version>
						</dependency>
						<dependency>
							<groupId>mysql</groupId>
							<artifactId>mysql-connector-java</artifactId>
							<version>${mysql-connector-java.version}</version>
						</dependency>
						<dependency>
							<groupId>commons-pool</groupId>
							<artifactId>commons-pool</artifactId>
							<version>${commons-pool.version}</version>
						</dependency>
					</dependencies>
				</dependencyManagement>
			}
			children:{
				cn.sunline.edsp.edsp-solution-'edsp dev platform':{
					cn.sunline.edsp.solution.edsp-solution-parent:{
						cn.sunline.ltts.cbs.cbs-parent-'OverSea R&amp;D CBS Basic':{
							cn.sunline.ltts.cbs.cbs-aplt
						}
					}
				}
			}
		}
	},
	11-ksys_rwzhxy-'批量任务执行域':{
					jyzxybzh								fenbsjql		kezxlclb		kezxjyzl	zhixyzht	zxtongbh
				批量交易执行域标识	分布式环境下,worker集群列表,格式ip1:port1;ip2:port2	可执行批量交易组列表
																	可执行批量交易流程列表				执行域状态	子系统编号
		values:{
			GL	99	GL			5	10	10	5	10	20	172.31.2.12:7493		;				*		RUNNING		bat
			GL	99	gl_dayend	1	1	5	5	10	20	;					gl_dayend			;		RUNNING		bat
			GL	99	gl_yearend	1	1	5	5	10	20	;					gl_yearend			;		RUNNING		bat
		}
	},	
	12-ksys_pllcbz-'批量流程步骤控制器':{
					pljylcbs	lcbuzmch			liucbuzh	zhixxuha	pljyzbsh		shifzhix
				批量交易流程ID	流程步骤名称		流程步骤号	执行序号	批量交易组ID	是否执行
		values:{
			GL	99	gl_dayend	GL EOD check			1			10			900				1
			GL	99	gl_dayend	gl date switch before	2			10			910				1
			GL	99	gl_dayend	gl date switch			3			10			920				1
			GL	99	gl_dayend	gl date switch after	4			10			930				1
			GL	99	gl_yearend	gl year end trail		1			10			940				1
		}
	},
	13-ksys_jyzkzq-'交易组控制器':{
					pljyzbsh	zubiezwm					rwyxxktj				rwyxhdfw
				批量交易组ID	交易组别中文描述	批量任务运行许可条件	批量任务运行回调服务
		values:{
			GL	99	100			File Operation		
			GL	99	110			Timing Task		
			GL	99	900			GL EOD check		
			GL	99	910			gl date switch before		
			GL	99	920			gl date switch		
			GL	99	930			gl date switch after		
			GL	99	940			gl year end trail		
		}
	},
	21-ksys_plrenw-'批量任务表':{
		insert-1:{
			DBBatchTaskInfoManager.registBatchTaskInfo(BatchTaskInfo, boolean);-3:{
				2-BatchUtil:{
					BatchUtil.submitAndRunTask(BatchTaskSubmitInfo, boolean);
					BatchUtil.submitAndRunTaskForAdmWeb(String, String, int, E_BATCHTASKEXECUTORMODE, DataArea)
				},
				1-DBBatchTaskInfoManager.registBatchTaskInfo(BatchTaskInfo)-1:{
				};
			}
		},
		col:{
			plrwzxpc-'批量任务执行批次号':{
				set-1:{
					DBBatchTaskExecuteInfo.setBatchTaskExecuteId(String);-7:{
						
					}
				}
			}
		},
		bean-interface-"BatchTaskInfo":{
			implements:{
				DBBatchTaskInfo:{
					ksys_plrenw info;:{
						
					},
					DBBatchTaskInfo();:{info=new ksys_plrenw},
					DBBatchTaskInfo(ksys_plrenw):{info=ksys_plrenw},
				}
			}
		}
	},
	ksys_plrwyx-'批量任务运行表':{
		insert-2:{
			DBBatchTaskExecuteInfoManager.registBatchTaskInfo(BatchTaskExecuteInfo, boolean);
			DBBatchTaskExecuteInfoManager.modifyBatchTaskInfo(BatchTaskExecuteInfo, boolean);
		},
		values:{
			
		}
	}
},
ltts:{
	batch:{
		EngineBatchPluginErrorDef-'批量调度引擎插件错误码定义':{
			SP_EB-'批量调度引擎插件':{
				E133-'任务执行域${domainId}作业服务器列表属性配置错误':{
					call-1:{
						RemoteJobExecutorThreadPoll.RemoteJobExecutorThreadPoll(BatchTaskDomainInfo, ThreadPoolExecutor);:{
							logic:{
								getSocketCliendConfig(BatchTaskDomainInfo):{
									for(config.getWorkers()):{
										new SocketClientConfig(ipAndPort, (String)items.get(0), Integer.parseInt((String)items.get(1)))
									}
								},
							},
							call-1:{
								BatchTaskExecutorRouterByServerMode.getBatchJobExecutor(BatchStep):{
									logic:{
										
									},
									BatchTaskDomainInfo domainInfo -set-1:{
										BatchTaskExecutorRouterByServerMode(ThreadPoolExecutor, ThreadPoolExecutor, BatchTaskDomainInfo domainInfo);:{
											call-1:{
												LocalBatchTaskDomainServer.BatchTaskCallable.execute():{
													config-set-2:{
														LocalBatchTaskDomainServer(BatchTaskDomainInfo);-1:{
															LocalBatchTaskDomainServerManager.domainStart(BatchTaskDomainInfo);-2:{
																LocalBatchTaskDomainServerManager.domainLoad();-logic:{
																	BatchResources.get().getBatchServerDataManager().getAllRunnableDomainInfo(subSystemId);-call-2:{
																		DBBatchServerDataManager.getAllRunnableDomainInfo(String);-logic:{
																			getGroupDomainInfos(SysBatchDao.selectAllRunnableTaskDomain(subSystemId, CoreUtil.getSystemId(), false));:{
																				nsql-SysBatch.selectAllRunnableTaskDomain:{
																					select * from ksys_rwzhxy
																					where zhixyzht in ('START', 'RUNNING') and zxtongbh='bat' and xitongbs='CBS'
																				},
																				new DBBatchTaskDomainInfo(domain-'ksys_rwzhxy');:{
																					domain_id:"xitongbs-Farendma-Jyzxybzh"; 'CBS-99-Core_EOD'
																					workers:Fenbsjql; ';'
																				}
																			}
																		}
																		XmlBatchServerDataManager.getAllRunnableDomainInfo(String);:{return null;}
																	}
																},
																LocalBatchTaskDomainServerManager.domainReload();-logic:{
																	BatchResources.get().getBatchServerDataManager().getAllStartDomainInfo(subSystemId);-call-2:{
																		DBBatchServerDataManager.getAllStartDomainInfo(String);-logic:{
																			getGroupDomainInfos(Ksys_rwzhxyDao.selectAll_odb_2(subSystemId, KBaseEnumType.E_ZHIXYZHT.START, false));:{}
																		}
																		XmlBatchServerDataManager.getAllStartDomainInfo(String);:{return null;}
																	}
																}
															}
														}
														LocalBatchTaskDomainServer.reload(BatchTaskDomainInfo);
													},
													batchTaskInfo-BatchTaskCallable.BatchTaskInfo-set:{
														BatchTaskCallable(BatchTaskInfo, BatchTaskExecuteInfoManager);
														LocalBatchTaskDomainServer.submit(BatchTaskInfo, boolean);
													}
												}
											}
										}
									}
								}
							}
						}
					} 
				}
			}	
		}
	}
},
ap:{
	ap0901-'获取需要执行的日终流程':{
		S-CustomBatchManager.getFlowIdsBySystemId-'获取需要执行的日终流程服务':{
			IBatchTranCustomManager.getFlowIdsForSystemId(String xitongbs)-'batch_trans_custom.batchTransCustomManager':{
				BsapBatchTranCustomManagerImpl.getFlowIdsForSystemId(String):{
					nsql-ApDayEnd.selBatchTranDef:{
						select
								a.pljylcbs,a.zhongwmc 
						from
								ksys_pllcdy a 
						where
								a.xitongbs = #system_id#
					}
				}
			}
		}
	},
	ap0800-'多法人日终状态全量信息查询':{
		S-CustomBatchManager.selMultiCorpnoStatusInfo-'多法人日终状态信息查询':{
			IBatchTranCustomManager.getMultiCorpnoDayEndStu(systcd, flowId, dayEndDate);-'batch_trans_custom.batchTransCustomManager':{
				BsapBatchTranCustomManagerImpl.getMultiCorpnoDayEndStu(String):{
					table-aps_dayend_info-select:{}
				}
			}
			table-aps_dayend_info-insert;
		}
	},
	ap0801-X00006'bat'-X00005'ops'eb0801-:{
		S-CustomBatchManager.submitMultiCorpnoDayEnd:{
			
		}
	},
	ap0810-'单法人多DCN日终状态查询服务':{
		S-CustomBatchManager.selMultiDcnStatusInfo-'获取需要执行的日终流程服务':{
			shifddcn:{
				!N:{
					CustomDRSUtil.findAllDcnNosWithAdmin();:{
						getIDRSClient().getDCN();:{
							
						}
					}
				}
			}
		}
	},
	ApTrxn.getAccountingEventSerial();:{
		call-1:{
			TaAccounting.regAccountingEvent(IoTaAccountingEventIn);
		}
	},
	TransactionProcessCallbackImpl.afterProcess(DataArea);:{
		accounting_event_seq > 1L :{
			SrvIoTaAccounting.checkBalance();
		}
	},
	ApOrg.getReferenceOrgId:{},
	ApBusinessParm.getValue:{
		select * from app_business_parameter where main_key='' and sub_key='*';
		select * from app_business_parameter where main_key='' and sub_key='';
	},
	ApCurrency.getChargeUpBase()-'收费入账币种':{	'获取费用入账基础货币'
		return ApBusinessParm.getValue("CHARGE_UP_CCY");
			select * from app_business_parameter where main_key='CHARGE_UP_CCY' and sub_key='*';	"TZS"
	},
	ApFile.getFullPath：{
		select * from app_directory;
	},
	ApSystemParm.getValue:{
		select * from app_system_parameter where main_key='' and sub_key='*';
		select * from app_system_parameter where main_key='' and sub_key='';
	},
	ApFile.createClient(String dirCode)-tz:{
		table-app_root_directory-select,
		new FileClientImpl("AbstractComponent.SFTPFileTransfer");:{
			SysUtil.getInstance(cn/sunline/ltts/aplt/component/ApBaseComp$FileTransfer, "AbstractComponent.SFTPFileTransfer")；
		}
	},
	ApRule.getFirstResultByScene:{	'按规则场景代码扫描并返回首个命中回执，无命中返回null'
			from app_rule where rule_scene_code=#rule_scene_code# and org_id=#org_id# order by rule_sort
		code:{
			List<String> rule = getAllResult(sceneCode, true);:{
				List<app_rule> rulesList = App_ruleDao.selectAll_odb1(sceneCode, false);
				for (app_rule rules : rulesList) {
					if (mapping(rules.getRule_id())) {
						rulesResult.add(rules.getMapping_result());
					}
					else {
						continue;
					}
					if (firstFlag)
						break;
				}
				return rulesResult;
			}
			return (rule.size() > 0) ? rule.get(0) : null;
		}
			'LN_CLASSIFICATION'
	}
	ApRule.mapping(String):{	'判断规则是否成立'
	 *         <li>如果数据集不是公共运行变量，需要调用addDataToBuffer方法添加数据</li>
	 *         <li>1):如果存在例外规则，则一个一个校验，如果有一个成立，则返回false<br/>
	 *         2):如果没有例外规则，或者例外规则都不成立，则校验输入的规则，校验成功返回true,失败false<br/>
	 *         3):一个规则可以有多个组，一个组可以有多个序号，组之间是'或'的关系，序号之间是'与'的关系<br/>
	 *         一个组内所有的序号都true，则该组才为true<br/>
	 *         只要有一个组是true，则直接返回true<br/>
		code:{
			
		}
	},
	ApRule.checkRule(String):{
		
	},
	ApRule.checkRuleSingle(rule, ruleBuffer);:{		'单条记录的检查'
		paramTemplate(Map<String, Object>, String, String):{	
			'参数按照模板替换 ${RUN_ENV.trx_date}、${INPUT.acct_no}或 ${trx_date}取默认的dataMart'
			
		}
	}
},
cm:{
	CmChrgAccounting.chrgDebit(CmChrgDeAccounting, BigDecimal, Boolean);:{
		code:{
			'收费入账币种'
			chargeUpCcy = ApCurrency.getChargeUpBase();
			'2、 计费币种和入账币种(税是本地币种)不一致，则做结售汇处理'
		}
	},
	CmChrgAccounting.chrgCreditccounting(cmb_chrg_acct, CmChrgCrAccounting):{'费用贷方记账'},
	CmChrgAccounting.regBranchChrgAccounting(BigDecimal, cmb_chrg_acct, String, CmChrgCrAccounting, boolean):{'会记及摊销计划登记'},
},
dp:{
	nsql-DpDayEnd.selOverdraftAccrualSubAcct-1:{
		DpOverDraftDayEnd.regAccrualExtract(String)-1:{
			dp04
		}
	}
}
ln:{
	method-LnTransfer.getOverdueNum-'null':{	'获取逾期月数或天数'
		code:{
			table-lna_loan-select-'Loan table',
			method-LnLoan.getLnaAccrual-'null':{	'取借据计息属性表信息'
				table-lna_accrual-select-'Loan interest accrual property table'
			},
			method-ApBusinessParm.getYesOrNoValue-'null':{
				method-ApBusinessParm.getValue-'null':{
					table-app_business_parameter-select-'system parameter'
						select * from app_business_parameter WHERE MAIN_KEY ='LN_CLASSIFICATION' AND SUB_KEY ='OVERDUE_IND';
						'借据级别逾期认定方式','借据级别认定中逾期是指借据逾期还是期供逾期Y:借据逾期 N:期供逾期'
				}
			},
			if(Y)-'借据逾期':{
				method-ApBusinessParm.getYesOrNoValue-'null':{
					method-ApBusinessParm.getValue-'null':{
						table-app_business_parameter-select-'system parameter'
					}
				},
				table-lna_repayment_schedule-select-'Loan repayment schedule table',
			}else{	'期供逾期'
				method-ApBusinessParm.getYesOrNoValue-'null':{
					method-ApBusinessParm.getValue-'null':{
						table-app_business_parameter-select-'system parameter'
					}
				},
				table-lna_repayment_schedule-select-'Loan repayment schedule table',
					select * from lna_repayment_schedule where loan_no='' and sub_period_no='1000' and org_id='99' order by period_no;
				method-ApBusinessParm.getYesOrNoValue-'null':{
					method-ApBusinessParm.getValue-'null':{
						table-app_business_parameter-select-'system parameter'
					}
				},
			}
			return method-LnTransfer.getOverdueNumSub-'null':{		'获取逾期月数或天数'
			method-ApBusinessParm.getValue-'null':{
				table-app_business_parameter-select-'system parameter'
			},
			return method-LnUtil.calMonths-'null':{
				method-BizUtil.dateDiff-'null',
				method-BizUtil.datePart-'null',
				method-BizUtil.datePart-'null'
			},
			return method-LnDate.calMaxDiffMonths-'null':{
				method-BizUtil.checkEffectDate-'null':{
					method-BizUtil.dateDiff-'null'
				}
			},
			return method-BizUtil.dateDiff-'null'
		}
		},
		call-2:{
			LnTransfer.autoTransfer(IoLnTransferIn)-5:{	'自动形态转移'
				LnExtend.processExtend(IoLnExtendIn);:{'贷款展期处理'},
				LnMaturityDateChange.transfer(IoLnMaturityDateChange),
				LnRepayment.transfer(LnLoanRepayIn):{'形态转移'},
				LnTransfer.transfer(IoLnTransferIn):{'贷款形态转移'}
			},
			manualTransferCheck(IoLnTransferIn, lna_loan):{		'手动形态转移检查'	}
		}
	},
	ln08-'loan transfer'-'贷款形态转移':{},
}
tables:{
	relation:{
		dpa_account.acct_no-'账号'-n:{
			1-dpb_overdraft.agree_no-'透支协议',cla_account.limit_code-'额度';-n:{
				1-dpb_overdraft_fiche.fiche_no-'卡片',dpb_overdraft_fiche.overdraft_inst_type-N-'常规透支',
				1-dpb_overdraft_fiche.fiche_no-'卡片',dpb_overdraft_fiche.overdraft_inst_type-O-'超额透支',
			}
		},
		cla_account.limit_code-'额度'-n:{
			1-cla_account:;
			1-cls_txn-'额度交易'
		}
		
										dpb_overdraft{agree_no}_____ 1-n______dpb_overdraft_fiche{fiche_no}
		dpa_account{acct_no}		_______________n-n________________		cla_account{limit_code}
				|
				|	1-n
				|
		dps_fiche_trxn{fiche_no,serial_no}
	},
	ap:{
		app_business_parameter:{
			value:{
			ORG_ID	MAIN_KEY	SUB_KEY			PARM_DESC					PARM_VALUE			PARM_REMARK	MODULE	DATA_CREATE_USER	DATA_CREATE_TIME	DATA_UPDATE_USER	DATA_UPDATE_TIME	DATA_VERSION
				99	CCY_EXCH_ALIAS	*	current ccy accounting alias	FCY_EXCHANGE_CUST	货币汇兑核算别名	AP	S####	20991231	S####	20991231	1
			},
			call:{
				CCY_EXCH_ALIAS-8:{
					1-CmChrgAccounting.chrgDebit(CmChrgDeAccounting, BigDecimal, Boolean);
					2-CmChrgAccounting.chrgCreditccounting(cmb_chrg_acct, CmChrgCrAccounting):{'费用贷方记账'},
					1-CmChrgAccounting.regBranchChrgAccounting(BigDecimal, cmb_chrg_acct, String, CmChrgCrAccounting, boolean):{'会记及摊销计划登记'},
				}
			}
		}
	},
	cf:{
		cfb_cust_auxiliary:{
			select:{
				selectAll_odb1:{
					CfCustInfoQuery.qryOtherCustTable(String, E_CUSTOMERTYPE):-3{
						CfCustInfoQuery.qryPersonInfo(IoCfPersonBaseIn);
						CfCustInfoQuery.qryCorporCustInfo(IoCfPersonBaseIn);-1:{
							SrvIoCfCustomerImpl.qryCorporCustInfo(IoCfPersonBaseIn)-6:{
								DpBuffer.addDataToCustBuffer(String, E_CUSTOMERTYPE);-24:{
									DpBuffer.getNewestAttrValue(dpa_sub_account, dpa_account, String, String, E_CUSTOMERTYPE)
								}
							}
						}
						CfCustInfoQuery.qryFiCustInfo(IoCfPersonBaseIn);
					}
				}
			}
		}
	},
	dp:{
		dps_bill:{
			col:{
				host_date:{runEnvs.getComputer_date()}
			},
			insert-7:{
				
			}
		},
		dpb_overdraft-'账户透支协议':{
			insert-1:{
				DpOverdraftAgree.regOverdraftAgree(DpOverdraftSignIn):{	'登记账户透支协议'
					DpOverdraftAgree.overdraftSign(DpOverdraftSignIn):{		'透支协议签约'
						SrvDpInstruct.overdraftSign(DpOverdraftSignIn);-1:{
							dp4235-'overdraft signed'-40803	dp4821In	2701	透支协议签约
						}
					}
				}
			}
		},
		dpb_overdraft_fiche:{
			insert-1-'登记账户透支卡片':{
				'登记账户透支卡片'
				DpOverdraftAgree.regoverdraftFiche(DpOverdraftSignIn, dpb_overdraft, dpa_sub_account, E_OVERDRAFTINSTTYPE):{
					'透支协议签约'		1912200000002
					DpOverdraftAgree.overdraftSign(DpOverdraftSignIn);-1:{	'透支协议签约'
						SrvDpInstruct.overdraftSign(DpOverdraftSignIn);-1:{
							dp4235
						}
					}
				}
			},
			update-7:{
				process-12:{
					dp4011-'current close account':{145707,147473},
					167388-dp4012-'close inter-bank deposits account',
					221448-dp4052-'Fixed Maturity After Renew Instruct maintenance',
							-dp4021-'multi to multi transfer'-175883-177407,
					235067-dp4235-'overdraft signed',
						  -dp4236-'overdraft agreement maintenance',
					237492-dp4237-'overdraft interest settlement',
					239978-dp4239-'single overdraft interest settlement',
					358461-dp01-'Deposit interest rate process',
					dp07-'Overdraft interest settlement'-362640,363441-5:{363074,363336,363358,363397,363419},
					372086-dp13-'Overdraft occupancy adjustment',
				},
				call-7:{
					DpOverDraftDayEnd.overDraftSettlementInst(dpa_sub_account, dpb_overdraft, List<dpb_overdraft_fiche> listODFiche):{	'透支账户还息账务处理'
						
					},
					DpOverDraftDayEnd.overdueAddInst(dpb_overdraft, List<dpb_overdraft_fiche>):{	'单个协议额度逾期加息处理,方法外判断是否逾期'
						
					},
					DpOverDraftSettle.clearOdAgree(List<DpOverDraftSettleAmount>):{		'透支卡片清零及协议信息关闭'
						
					},
					DpOverDraftSettle.clearSingleOdAgree(String, E_YESORNO):{	'透支卡片清零及协议信息关闭'
						
					},
					DpOverDraw.overdraftUse(dpa_sub_account, BigDecimal, BigDecimal):{	'按透支协议的利率高低计算使用顺序'
					
					},
				*	DpOverDraw.mdyOdAgreeFiche(String ficheNo, BigDecimal AdjustAmt, E_ADDSUBTRACT addOrSubs)-'更新透支卡片占用金额':{		' 更新透支卡片占用金额'		*
						code:{
							dpb_overdraft_fiche OdFiche = Dpb_overdraft_ficheDao.selectOne_odb2(ficheNo, true);:{
								select * from dpb_overdraft_fiche where fiche_no='ficheNo';
							},
							if(addOrSubs== E_ADDSUBTRACT.SUBTRACT-'B')
								OdFiche.setOccupied_amt(OdFiche.getOccupied_amt().subtract(AdjustAmt));
							else
								OdFiche.setOccupied_amt(OdFiche.getOccupied_amt().add(AdjustAmt));
							'更新卡片占用金额'
							Dpb_overdraft_ficheDao.updateOne_odb1(OdFiche);
						},
						call-6:{
							DpOverDraw.overdraftUse(dpa_sub_account, BigDecimal, BigDecimal):{	'按透支协议的利率高低计算使用顺序'
							
							},
						}
					},
					DpFicheReversal.ficheTrxnReversalIn(DpFicheTrxnReversalIn):{	'卡片交易冲账'
						occupied_amt
					}
				}
			}
			select-28:{
				selectByIndexWithLock_odb1:{
				
				},
				selectOne_odb1-8:{
					
				}
			}
		},
		dps_fiche_trxn:{
			insert-2:{
				DpFicheInterestDefine.regFicheTrxnDetail(dpa_fiche_interest, E_SAVEORDRAW, BigDecimal)-9:{		'登记卡片交易明细'-'zhoumy'
					DpTimeDraw.ficheAccounting(IoDpTimeDrawIn, dpa_sub_account):{'定期卡片记账'-'zhoumy'},
					DpTimeSave.regFicheInfo(IoDpTimeSaveIn, dpa_sub_account):{'登记卡片信息'-'HongBiao'},
					2-DpOverDraw.overdraftUse(dpa_sub_account, BigDecimal, BigDecimal)-1:{'透支额度占用'-'yangdl'-'modify by zhoumy: 按透支协议的利率高低计算使用顺序'
						DpOverDraw.overdraftDeal(dpa_sub_account, BigDecimal, BigDecimal, E_DEBITCREDIT)-1:{
							DpAccounting.updAccBal(DpUpdAccBalIn, boolean)-1:{	'更新账户余额:外围要确保已经Lock子账户信息表'
								DpAccounting.prcMain(DpUpdAccBalIn, boolean):{	'负债本金记账处理'
									
								}
							}
						}
					},
					DpOverDraw.overdraftRepayment(dpa_sub_account, BigDecimal, BigDecimal):{'透支归还'-'yangdl'-'按透支协议的利率高低计算归还顺序'},
					DpOverDraw.lowRateLimitUse(DpUsedOverDraftInfo, dpa_sub_account, List<DpOverDraftUsableInfo>):{'新低价协议透支额度占用'-'zhoumy'-'注意占用金额和卡片余额是两回事'},
					DpOverDraw.highRateLimitRelease(DpUsedOverDraftInfo, dpa_sub_account, BigDecimal):{'额度重新分布时旧透支额度释放'-'zhoumy'},
					2-dp13,
				}
				
			}
		}
		fiche_no-'卡片号':{
			dpa_fiche_interest-'卡片利息表'-'Fiche interest table',
			dpa_fiche_interest_rate-'卡片利率表'-,
			dps_fiche_accrued-'卡片核算利息明细表'-'Fiche accrued interest details',
			dps_fiche_payed_interest-'卡片已付利息表'-'Fiche interest payment details',
			dpb_fiche_rate_hist-'卡片历史利率登记簿'-'Fiche Historical Interest Rate Register Book',
			dpb_fiche_balance_hist-'卡片历史余额登记簿'-'Fiche History Balance Register Book',
			dps_fiche_trxn-'卡片交易明细流水'-'Fiche trxn detail table',
			dpb_overdraft_fiche-'账户透支卡片'-'Account overdraft fiche',
		},
		DpOverDraw.overdraftUse(dpa_sub_account subAccount, BigDecimal beforeBl, BigDecimal trxn_amt):{	'透支额度占用'-'yangdl'-'modify by zhoumy: 按透支协议的利率高低计算使用顺序'
			code:{
				'查询账户信息'
				dpa_account account = Dpa_accountDao.selectOne_odb1(subAccount.getAcct_no(), false);
				'查询透支协议'
				List<dpb_overdraft> listODAgree = DpFundPoolDao.selOverdraftAgreeByAcct(subAccount.getAcct_no(), subAccount.getCcy_code(), E_STATUS.VALID, BizUtil.getTrxRunEnvs()
					.getTrxn_date(), BizUtil.getTrxRunEnvs().getBusi_org_id(), false);
				'获取可使用额度信息: 已按利率升序排列'
				List<DpOverDraftUsableInfo> listODAgreeLimit = getODAgreeUsableInfo(subAccount, listODAgree);:{	'获取可使用透支额度信息'-'zhoumy'
					method-BizUtil.getTrxRunEnvs-'null',
					nsql-DpFundPool.selOverdraftAgreeByAcct-S-dpb_overdraft-select-'query vaild overdraft agree by account number',
					error-SrvIoClLimitMgt.limitBalTrial-'null',
					table-dpb_overdraft_fiche-select-'Account overdraft fiche',
					table-dpa_fiche_interest-select-'Fiche interest table',
					table-dpa_fiche_interest_rate-select-'Fiche interest rate definition table'
				}
			},
			call-1:{
				DpOverDraw.overdraftDeal(dpa_sub_account, BigDecimal, BigDecimal, E_DEBITCREDIT)-1:{
					DpAccounting.updAccBal(DpUpdAccBalIn, boolean);-1:{
						DpAccounting.prcMain(DpUpdAccBalIn, boolean);-2:{
							DpAccounting.online(DpUpdAccBalIn)-14:{
								DpDemandDraw.accountingTally(IoDpDemandDrawIn, String):{
									DpDemandDraw.doMainMethod(IoDpDemandDrawIn, dpa_account, dpa_sub_account)
								}
							}
						}
					}
				}
			}			
		},
		DpOverDraw.lowRateLimitUse(DpUsedOverDraftInfo, dpa_sub_account, List);:{
			call-1:{
				DpOverDraw.ODLimitAfreshLayout(List, dpa_sub_account):-4{
					DpOverDraftDayEnd.ODLimitAfreshLayout(dpa_sub_account, List)-1:{
						DpOverDraftDayEnd.accruedOdInterest(dpa_sub_account);-1:{
							DpPublic.getBalance(DpBalanceCalculateIn):{
								
							}
						}
					}
				}
			}
		},
		nsql-DpFroze.selWholeBalFrozeSource-1:{
			DpPublic.CalcSubAcctFrozeAmountInfo(dpa_sub_account, DpBalanceCalculateIn, DpBalanceCalculateOut);-1:{
				DpPublic.getBalance(DpBalanceCalculateIn):{
					
				}
			}
		},
		nsql-DpFundPool.selOverdraftAgreeByAcct:{
				DpPublic.getBalance(DpBalanceCalculateIn):{
					
				}
		}
	}
	cl:{
		clb_ocpbook:{
			insert-2:{
				ClLimitOcpManager.registBusibodyOccupyAmt(String, String, String, BigDecimal);-1:{
					ClLimitTransManager.leafProcessOnOccupy(cla_account, IoClAmtOperationIn)-1:{
						ClLimitTransManager.checkLimitOnBusi(IoClAmtOperationIn);-1:{
							ClLimitTransManager.updateClOnUse(IoClUseIn, E_LIMITOPERATIONTYPE)-2:{
								ClLimitTransManager.updateClOnOccupy(IoClUseIn)-1:{
									SrvClLimitMgt.limitOccupy(IoClUseIn);-9:{
										1-IoClient4CreditLimit.ioOccupyLimit(LimitOccupyIn);-1:{
											LnLoanDrawdown.occupyLimit(IoLnLoanDrawdownIn);
										},
										3-dp:{
											2-DpOverDraw.overdraftUse(dpa_sub_account, BigDecimal, BigDecimal);
											1-DpOverDraw.lowRateLimitUse(DpUsedOverDraftInfo, dpa_sub_account, List);
										},
										5-ts,
									}
								},
								ClLimitTransManager.updateClOnRelease(IoClUseIn)
							}
						}
					}
				}
				ClLimitOcpManager.calcAndRegistOccupyAmt(cla_account, cla_account, IoClAmtOperationIn);
			},
			select:{
				selectOneWithLock_odb1-2:{
					ClLimitInfoBuilder.createLimitInfo(IoClBasicInfoForBuildLimit);
					ClLimitCommUtil.getClaAccountWithLock(String);-23
				}
			}	
		},
		cls_txn:{
			insert-5:{
				ClLimitInfoBuilder.regClsBillOnCreate(ClLimitOprtUnit, IoClBasicInfoForBuildLimit, String);-1:{
					saveClaLimits(Deque, IoClBasicInfoForBuildLimit, String, boolean)-1:{
						ClLimitInfoBuilder.buildLimit(IoClBasicInfoForBuildLimit, boolean)
					}
				}
			}
		}
	}
}